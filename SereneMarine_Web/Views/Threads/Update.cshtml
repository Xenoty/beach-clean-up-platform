@model SereneMarine_Web.ViewModels.Threads.ThreadUpdateViewModel

@{
    ViewBag.Title = "Update Thread";
}

<div>
    @Html.ActionLink("Back to Threads", "Index")
</div>

@using (Html.BeginForm("Update", "Threads", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @if (ViewBag.ApiError != null)
    {
        <div class="alert-danger">
            <strong>@ViewBag.ApiError.StatusCode.ToString()</strong>
            <strong>@ViewBag.ApiError.Content.ToString()</strong>
        </div>
    }
    @Html.HiddenFor(model => model.thread_id)
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @await Html.PartialAsync("_ThreadEditCreatePartial", Model)

    <div class="form-group">
        @Html.LabelFor(model => model.author, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.author, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.author, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.thread_closed, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.thread_closed, new SelectList(new[]
            {
                new SelectListItem { Value = "false", Text = "No"},
                new SelectListItem { Value = "true", Text = "Yes"}
            },
            "Value",
            "Text"
            ),
           new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.thread_descr, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-success" />
        </div>
    </div>
</div>
}


